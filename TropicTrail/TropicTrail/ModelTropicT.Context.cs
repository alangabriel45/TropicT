//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TropicTrail
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TropicTEntities : DbContext
    {
        public TropicTEntities()
            : base("name=TropicTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Card> Card { get; set; }
        public DbSet<Offers> Offers { get; set; }
        public DbSet<Reservation> Reservation { get; set; }
        public DbSet<Role> Role { get; set; }
        public DbSet<TourType> TourType { get; set; }
        public DbSet<Transaction> Transaction { get; set; }
        public DbSet<UserAccount> UserAccount { get; set; }
        public DbSet<UserInformation> UserInformation { get; set; }
        public DbSet<vw_role> vw_role { get; set; }
        public DbSet<vw_Transactions> vw_Transactions { get; set; }
    
        public virtual int sp_UpdateUserInformation(string userId, string lName, string fName, string phone, string street, string city, string state, string zipCode, string profilePic)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("lName", lName) :
                new ObjectParameter("lName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("fName", fName) :
                new ObjectParameter("fName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("zipCode", zipCode) :
                new ObjectParameter("zipCode", typeof(string));
    
            var profilePicParameter = profilePic != null ?
                new ObjectParameter("profilePic", profilePic) :
                new ObjectParameter("profilePic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserInformation", userIdParameter, lNameParameter, fNameParameter, phoneParameter, streetParameter, cityParameter, stateParameter, zipCodeParameter, profilePicParameter);
        }
    
        public virtual ObjectResult<sp_ViewOffers_Result> sp_ViewOffers(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ViewOffers_Result>("sp_ViewOffers", idParameter);
        }
    }
}
