@*@model TropicTrail.UserInformation*@
@model TropicTrail.Lists

@{
    ViewBag.Title = "EditProfile";
}
<link href="~/Content/css/EditProfile.css" rel="stylesheet" />


<body class="body">
    @using (Html.BeginForm("EditProfile", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>UserInformation</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                <div class="col col-md-10">
                    <input id="profilePic" name="profilePic" type="file" accept="image/*">
                    <br />
                    Preview
                    <div id="preview"></div>        
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.lastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.lastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.fistName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.fistName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.fistName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.phone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.phone, "", new { @class = "text-danger" })
                    @if (TempData["ErrorNumber"] != null)
                    {
                        <div class="text-danger">@TempData["ErrorNumber"]</div>
                    }
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.email, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.email, "", new { @class = "text-danger" })
                    @if (TempData["ErrorEmail"] != null)
                    {
                        <div class="text-danger">@TempData["ErrorEmail"]</div>
                    }
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.street, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.street, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.street, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.city, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.city, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.city, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.state, htmlAttributes: new { @class = "control-label col-md-1" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.state, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.state, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.createRetrieve.zipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.createRetrieve.zipCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.createRetrieve.zipCode, "", new { @class = "text-danger" })
                    @if (TempData["ErrorZip"] != null)
                    {
                        <div class="text-danger">@TempData["ErrorZip"]</div>
                    }
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

</body>
